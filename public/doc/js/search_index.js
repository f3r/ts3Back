var search_data = {"index":{"searchIndex":["address","addressescontroller","adresseshelper","applicationcontroller","applicationhelper","authentication","authenticationscontroller","availabilitiescontroller","availability","city","confirmationscontroller","country","customfailure","exceptions","unauthorizedaccess","generalhelper","geocontroller","itemshelper","object","passwordscontroller","place","placetype","placetypescontroller","placescontroller","registrationscontroller","sessionscontroller","state","user","usermailer","userscontroller","age()","authenticated?()","check_email()","check_token()","create()","create()","create()","create()","create()","create()","create()","create()","create()","current_user()","delete()","delete_caches()","destroy()","destroy()","destroy()","destroy()","destroy()","facebook()","facebook_info()","filter_fields()","filter_object()","filter_params()","fof?()","format_errors()","format_response()","friends?()","full_name()","get_cities()","get_city()","get_countries()","get_facebook_oauth_info()","get_states()","group_attributes()","http_auth_body()","i18n_message()","import_facebook_friends()","index()","index()","info()","list()","list()","message()","new()","new()","new()","new()","oauth_create()","password_validations_required?()","redis_key()","return_message()","search()","show()","show()","show()","state()","twitter()","update()","update()","update()","update()","update()","update()","user_places()","validates_overlapping()","welcome_note()","readme_for_app"],"longSearchIndex":["address","addressescontroller","adresseshelper","applicationcontroller","applicationhelper","authentication","authenticationscontroller","availabilitiescontroller","availability","city","confirmationscontroller","country","customfailure","exceptions","exceptions::unauthorizedaccess","generalhelper","geocontroller","itemshelper","object","passwordscontroller","place","placetype","placetypescontroller","placescontroller","registrationscontroller","sessionscontroller","state","user","usermailer","userscontroller","user#age()","applicationcontroller#authenticated?()","registrationscontroller#check_email()","applicationcontroller#check_token()","addressescontroller#create()","authenticationscontroller#create()","availabilitiescontroller#create()","confirmationscontroller#create()","passwordscontroller#create()","placetypescontroller#create()","placescontroller#create()","registrationscontroller#create()","sessionscontroller#create()","applicationcontroller#current_user()","authenticationscontroller#delete()","generalhelper#delete_caches()","addressescontroller#destroy()","availabilitiescontroller#destroy()","placetypescontroller#destroy()","placescontroller#destroy()","registrationscontroller#destroy()","user#facebook()","user#facebook_info()","generalhelper#filter_fields()","generalhelper#filter_object()","generalhelper#filter_params()","user#fof?()","generalhelper#format_errors()","generalhelper#format_response()","user#friends?()","user#full_name()","geocontroller#get_cities()","geocontroller#get_city()","geocontroller#get_countries()","authenticationscontroller#get_facebook_oauth_info()","geocontroller#get_states()","generalhelper#group_attributes()","customfailure#http_auth_body()","customfailure#i18n_message()","user#import_facebook_friends()","addressescontroller#index()","placetypescontroller#index()","userscontroller#info()","authenticationscontroller#list()","availabilitiescontroller#list()","exceptions::unauthorizedaccess#message()","addressescontroller::new()","authenticationscontroller::new()","placetypescontroller::new()","placescontroller::new()","sessionscontroller#oauth_create()","user#password_validations_required?()","user#redis_key()","applicationcontroller#return_message()","placescontroller#search()","confirmationscontroller#show()","placescontroller#show()","userscontroller#show()","city#state()","user#twitter()","addressescontroller#update()","availabilitiescontroller#update()","passwordscontroller#update()","placetypescontroller#update()","placescontroller#update()","userscontroller#update()","placescontroller#user_places()","availability#validates_overlapping()","usermailer#welcome_note()",""],"info":[["Address","","Address.html","",""],["AddressesController","","AddressesController.html","",""],["AdressesHelper","","AdressesHelper.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Authentication","","Authentication.html","",""],["AuthenticationsController","","AuthenticationsController.html","",""],["AvailabilitiesController","","AvailabilitiesController.html","",""],["Availability","","Availability.html","",""],["City","","City.html","",""],["ConfirmationsController","","ConfirmationsController.html","",""],["Country","","Country.html","",""],["CustomFailure","","CustomFailure.html","",""],["Exceptions","","Exceptions.html","",""],["Exceptions::UnauthorizedAccess","","Exceptions/UnauthorizedAccess.html","",""],["GeneralHelper","","GeneralHelper.html","",""],["GeoController","","GeoController.html","",""],["ItemsHelper","","ItemsHelper.html","",""],["Object","","Object.html","",""],["PasswordsController","","PasswordsController.html","",""],["Place","","Place.html","",""],["PlaceType","","PlaceType.html","",""],["PlaceTypesController","","PlaceTypesController.html","",""],["PlacesController","","PlacesController.html","",""],["RegistrationsController","","RegistrationsController.html","",""],["SessionsController","","SessionsController.html","",""],["State","","State.html","",""],["User","","User.html","",""],["UserMailer","","UserMailer.html","",""],["UsersController","","UsersController.html","",""],["age","User","User.html#method-i-age","()",""],["authenticated?","ApplicationController","ApplicationController.html#method-i-authenticated-3F","()",""],["check_email","RegistrationsController","RegistrationsController.html#method-i-check_email","()","<p>Description\n<p>Checks whether an email is already registered with us already\n<p>Resource URL\n"],["check_token","ApplicationController","ApplicationController.html#method-i-check_token","()",""],["create","AddressesController","AddressesController.html#method-i-create","()","<p>Description\n<p>Creates a new address for the current user, must include street name, city,\ncountry and zip …\n"],["create","AuthenticationsController","AuthenticationsController.html#method-i-create","()","<p>Description\n<p>Adds an authentication method to the current_user\n<p>Resource URL\n"],["create","AvailabilitiesController","AvailabilitiesController.html#method-i-create","()","<p>Description\n<p>Creates a new availability for a place\n<p>Resource URL\n"],["create","ConfirmationsController","ConfirmationsController.html#method-i-create","()","<p>Resource URL\n<p>/users/confirmation.format\n<p>Example\n"],["create","PasswordsController","PasswordsController.html#method-i-create","()","<p>Description\n<p>If a user forgets the password, you call this url with the email and we\nwill send him an email …\n"],["create","PlaceTypesController","PlaceTypesController.html#method-i-create","()","<p>Resource URL\n<p>/place_types.format\n<p>Example\n"],["create","PlacesController","PlacesController.html#method-i-create","()","<p>Description\n<p>Crates a new place with basic information\n<p>Resource URL\n"],["create","RegistrationsController","RegistrationsController.html#method-i-create","()","<p>Description\n<p>This is the first step for a registration of new user. Just give us the\nname, email and password, …\n"],["create","SessionsController","SessionsController.html#method-i-create","()","<p>Description\n<p>Given an email and password, this method returns the authentication token\nof the user so you …\n"],["current_user","ApplicationController","ApplicationController.html#method-i-current_user","()",""],["delete","AuthenticationsController","AuthenticationsController.html#method-i-delete","()","<p>Description\n<p>Deletes one of the authentications of the current user\n<p>Resource URL\n"],["delete_caches","GeneralHelper","GeneralHelper.html#method-i-delete_caches","(caches)",""],["destroy","AddressesController","AddressesController.html#method-i-destroy","()","<p>Description\n<p>Deletes one of the addresses of the current user\n<p>Resource URL\n"],["destroy","AvailabilitiesController","AvailabilitiesController.html#method-i-destroy","()","<p>Description\n<p>Deletes an availability for a place\n<p>Resource URL\n"],["destroy","PlaceTypesController","PlaceTypesController.html#method-i-destroy","()","<p>Resource URL\n<p>/place_types/:id.format\n<p>Example\n"],["destroy","PlacesController","PlacesController.html#method-i-destroy","()","<p>Description\n<p>Deletes a place\n<p>Resource URL\n"],["destroy","RegistrationsController","RegistrationsController.html#method-i-destroy","()","<p>Description\n<p>Deactivates a user account. Deactivation means that the user account will\nbe “soft deleted” …\n"],["facebook","User","User.html#method-i-facebook","()","<p>gets users facebook authentication object, if exists\n"],["facebook_info","User","User.html#method-i-facebook_info","(auto_import=false)",""],["filter_fields","GeneralHelper","GeneralHelper.html#method-i-filter_fields","(object, fields, options={})",""],["filter_object","GeneralHelper","GeneralHelper.html#method-i-filter_object","(object, fields, options={})",""],["filter_params","GeneralHelper","GeneralHelper.html#method-i-filter_params","(params, fields, options={})",""],["fof?","User","User.html#method-i-fof-3F","(user)","<p>Returns true if the current user and the given user have a common friend\n"],["format_errors","GeneralHelper","GeneralHelper.html#method-i-format_errors","(errors)",""],["format_response","GeneralHelper","GeneralHelper.html#method-i-format_response","(response,format)",""],["friends?","User","User.html#method-i-friends-3F","(user)","<p>Returns true if the current user is friends with the given user\n"],["full_name","User","User.html#method-i-full_name","()",""],["get_cities","GeoController","GeoController.html#method-i-get_cities","()","<p>Description\n<p>Returns a list of all the cities on a state, accepts country_code\n<strong>OR</strong> state_id <strong>OR</strong> country_id …\n"],["get_city","GeoController","GeoController.html#method-i-get_city","()","<p>Description\n<p>Returns a city\n<p>Resource URL\n"],["get_countries","GeoController","GeoController.html#method-i-get_countries","()","<p>Description\n<p>Returns a list of all the countries\n<p>Resource URL\n"],["get_facebook_oauth_info","AuthenticationsController","AuthenticationsController.html#method-i-get_facebook_oauth_info","()","<p>Description\n<p>Returns all the info from the facebook profile of the current user\nincluding name, gender, …\n"],["get_states","GeoController","GeoController.html#method-i-get_states","()","<p>Description\n<p>Returns a list of all the states on a country, accepts country_code\n<strong>OR</strong> country_id\n<p>Resource …\n"],["group_attributes","GeneralHelper","GeneralHelper.html#method-i-group_attributes","(attributes, prefix = nil)",""],["http_auth_body","CustomFailure","CustomFailure.html#method-i-http_auth_body","()",""],["i18n_message","CustomFailure","CustomFailure.html#method-i-i18n_message","(default = nil)",""],["import_facebook_friends","User","User.html#method-i-import_facebook_friends","()",""],["index","AddressesController","AddressesController.html#method-i-index","()","<p>Description\n<p>Returns all the addresses of the current user\n<p>Resource URL\n"],["index","PlaceTypesController","PlaceTypesController.html#method-i-index","()","<p>Resource URL\n<p>/place_types.format\n<p>Example\n"],["info","UsersController","UsersController.html#method-i-info","()","<p>Description\n<p>Returns all the public information of a specific user\n<p>Resource URL\n"],["list","AuthenticationsController","AuthenticationsController.html#method-i-list","()","<p>Description\n<p>Returns a list of all the authentications of the current_user\n<p>Resource URL\n"],["list","AvailabilitiesController","AvailabilitiesController.html#method-i-list","()","<p>Description\n<p>List all availabilities of a place\n<p>Resource URL\n"],["message","Exceptions::UnauthorizedAccess","Exceptions/UnauthorizedAccess.html#method-i-message","()",""],["new","AddressesController","AddressesController.html#method-c-new","()",""],["new","AuthenticationsController","AuthenticationsController.html#method-c-new","()",""],["new","PlaceTypesController","PlaceTypesController.html#method-c-new","()",""],["new","PlacesController","PlacesController.html#method-c-new","()",""],["oauth_create","SessionsController","SessionsController.html#method-i-oauth_create","()","<p>Description\n<p>Given an provider and provider token, this method returns the\nauthentication token of the …\n"],["password_validations_required?","User","User.html#method-i-password_validations_required-3F","()",""],["redis_key","User","User.html#method-i-redis_key","(str)","<p>helper method to generate redis keys\n"],["return_message","ApplicationController","ApplicationController.html#method-i-return_message","(status,stat,fields={})","<p>Status = HTTP Status code (ie. 200) Stat   = Message status code (ie. :ok\nor :fail) Fields = Array of …\n"],["search","PlacesController","PlacesController.html#method-i-search","()",""],["show","ConfirmationsController","ConfirmationsController.html#method-i-show","()","<p>Description\n<p>Once a user receives the registration email, this method activates the\naccount.\n<p>The token sent …\n"],["show","PlacesController","PlacesController.html#method-i-show","()","<p>Description\n<p>Returns all the information about a place\n<p>Resource URL\n"],["show","UsersController","UsersController.html#method-i-show","()","<p>Description\n<p>Returns all the information of the current user\n<p>Resource URL\n"],["state","City","City.html#method-i-state","()",""],["twitter","User","User.html#method-i-twitter","()","<p>gets users twitter authentication object, if exists\n"],["update","AddressesController","AddressesController.html#method-i-update","()","<p>Description\n<p>Updates one of the current user’s Addresses\n<p>Resource URL\n"],["update","AvailabilitiesController","AvailabilitiesController.html#method-i-update","()","<p>Description\n<p>Updates an availability of a place\n<p>Resource URL\n"],["update","PasswordsController","PasswordsController.html#method-i-update","()","<p>Description\n<p>Once the user receives a “forget password” email, you can call this method\nto reset …\n"],["update","PlaceTypesController","PlaceTypesController.html#method-i-update","()","<p>Resource URL\n<p>/place_types/:id.format\n<p>Example\n"],["update","PlacesController","PlacesController.html#method-i-update","()","<p>Description\n<p>Updates a place with additional information\n<p>Resource URL\n"],["update","UsersController","UsersController.html#method-i-update","()","<p>Description\n<p>Updates the information for an authenticated user.\n<p><strong>Note:</strong> User fields must be enclosed with ...\n"],["user_places","PlacesController","PlacesController.html#method-i-user_places","()","<p>Description\n<p>Shows a users places\n<p>Resource URL\n"],["validates_overlapping","Availability","Availability.html#method-i-validates_overlapping","()","<p>Checks if any other interval for the same place, overlaps this interval\n"],["welcome_note","UserMailer","UserMailer.html#method-i-welcome_note","(user)","<p>Description\n<p>Email sent when the user confirms the account TODO: figure out html/txt\nsending (user preferences?) …\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Errors list\n<p>error codes\n<p>100 &mdash; has already been taken\n"]]}}